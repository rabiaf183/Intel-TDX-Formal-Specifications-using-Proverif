(* PrehandshakeAttestation.pv: Intel TDX Attester with TLS 1.3 *)
(*-----------------------------------------------------------------*)
(* Type Declarations *)
(*----------------------------------------------------------------*)
type MacKey.   (* mac key *)
type Hash.      (* hash *)
type SigningKey.     (* signature key *)
type VerifyingKey.     (* signature verification key *)

fun hmacSha256(MacKey, bitstring): bitstring.
fun sha256Hash(bitstring): Hash.
fun sha384Hash(bitstring): Hash.
fun hash2bs(Hash): bitstring [typeConverter].

fun pub(SigningKey): VerifyingKey.
fun verKey2bs(VerifyingKey): bitstring [typeConverter].
fun kdfRK(bitstring, bitstring): MacKey. (*SGX*)

free c: channel. (*Public channel*)
free c_PCE_QE: channel.
free c_PCE_Ver: channel [private]. (*Private channel*)


fun sign(SigningKey, bitstring): bitstring.

fun verifySign(VerifyingKey, bitstring, bitstring): bool
reduc 
  forall key: SigningKey, msg: bitstring;
    verifySign(pub(key), msg, sign(key, msg)) = true.
    (*-----------------------------------------------------------------------*)
(* TD QE provided by Intel *)
free mrEncRef: bitstring. (*MRENCLAVE of QE*)
free mrSignerRef: bitstring. (*MRSIGNER of QE*)
free prodidRef: bitstring. (*PRODID of QE*)


(* TDX Module provided by Intel *)
free mrsRef: bitstring. (*Measurement of TDX Module*)
free mrssRef: bitstring. 
free attRef: bitstring. 

(* TD provided by TD Owner *)
free mrtdRef: bitstring. 
free rtmr0Ref: bitstring. 
free rtmr1Ref: bitstring. 
free rtmr2Ref: bitstring. 
free rtmr3Ref: bitstring. 
free mroRef: bitstring. 
free mrcRef: bitstring. 
free mrocRef: bitstring. 

free zeroPadRef: Hash.  (* symbolically representing the value 32-0x00's *)
free QEauthDataRef: bitstring. (* Ref Value of QEauthData *)



(*-------------------------------------------------------------------------------------------------------*)

(**********************************************************************)
(* Other declarations, e.g., events *)
(**********************************************************************)
event test.
event test2.
event test3.
event test4.
event test5.
event test6(bitstring).
event test7(bitstring, bitstring).
event test8.
event decSuccess.
event CPUsentSMR(bitstring, bitstring).
event TDXMsentTDR(bitstring).
event QuoteVerified(bitstring, bitstring, bitstring).
event TDidentity(VerifyingKey). 
event VerIdentity(VerifyingKey). 
event AKverified(VerifyingKey). 
event AKsent(VerifyingKey).
(********************************************************)



(* Inputs for TDR report:
Assumptions: 
QEReport = TDQE REPORT 
  QEReportBody = QE Report Body
    CPUSVN = CPUSVN 
    misc = MISCSELECT
    cetAtt = CET_ATTRIBUTES
    res6 = RESERVED
    extprodid = ISVEXTNPRODID
    attEnc = ATTRIBUTES 
      provKeyFlag = PROVISIONKEY
      debugFlag = DEBUG
    mrEnc = MRENCLAVE
    res7 = RESERVED
    mrSigner = MRSIGNER
    res8 = RESERVED
    config = CONFIGID
    prodid = ISVPRODID
    QESVN = ISVSVN
    confSVN = CONFIGSVN
    res9 = RESERVED
    famID = ISVFAMILYID
    QErdata = REPORTDATA 
  keyID = KEYID
  QEmac = MAC

**********************************************
tdr = TDREPORT_STRUCT 
  smr = SEAMREPORT 
    rms = REPORTMACSTRUCT
      rtyp = REPORTTYPE
      res1 = RESERVED
      csvn = CPUSVN 
      tcbh = TEE_TCB_INFO_HASH
      tdih = TEE_INFO_HASH
      rdata = REPORTDATA
      res2 = RESERVED
      mac = MAC
    tcbi = TEE_TCB_INFO
      val = VALID 
      TDXTCBSVN = TEE_TCB_SVN
      mrs = MRSEAM
      mrss = MRSIGNERSEAM
      att = SEAMATTRIBUTES
      res3 = RESERVED
  res4 = RESERVED
  tdi = TDINFO 
    tdatt = TDATTRIBUTES
    xfam = XFAM 
    mrtd = MRTD
    mrc = MRCONFIGID
    mro = MROWNER
    mroc = MROWNERCONFIG
    rtmr = RTMR
    TODO = SERVTD_HASH 
    res = RESERVED

(*Remote Evidence for QE*)
Quote = TD QUOTE 
  QuoteHeader [TODO]
    Version
    Attestation Key Type
    TEE Type
    RESERVED
    RESERVED
    QE Vendor ID
    User Data
  QuoteBody = TD Quote Body 
    tcbiClaims 
      TDXTCBSVN = TEE_TCB_SVN
      mrs = MRSEAM
      mrss = MRSIGNERSEAM
      att = SEAMATTRIBUTES
      (*TDI claims for agent use*)
    tdiClaims [for artifacts only]
      tdatt = TDATTRIBUTES 
        tudFlag = TD Under Debug flags (TUD)
        secFlag = SEC (SEPT_VE_DISABLE, PKS, KL)
      xfam = XFAM 
      mrtd = MRTD
      mrc = MRCONFIGID
      mro = MROWNER
      mroc = MROWNERCONFIG
      rtmr0 = RTMR0
      rtmr1 = RTMR1
      rtmr2 = RTMR2
      rtmr3 = RTMR3
    rdata = REPORTDATA
  AKsig
  AKcert
    pubAK
    QEReportBody
    PCKsig
    QEauthData
  PCKcert 
    ppid = PPID 
    TODO = TCB
      sgxTcbComp = sgxtcbcomponents (SGX TCB Comp 01-16)
        sgxTcbComp1
        sgxTcbComp2
        sgxTcbComp3
        sgxTcbComp4
        sgxTcbComp5
        sgxTcbComp6
        sgxTcbComp7
        sgxTcbComp8
        sgxTcbComp9
        sgxTcbComp10
        sgxTcbComp11
        sgxTcbComp12
        sgxTcbComp13
        sgxTcbComp14
        sgxTcbComp15
        sgxTcbComp16    
      PCESVN = PCESVN 
      tdxTcbComp = tdxtcbcomponents (TDX TCB Comp 01-16)
        tdxTcbComp1
        tdxTcbComp2
        tdxTcbComp3
        tdxTcbComp4
        tdxTcbComp5
        tdxTcbComp6
        tdxTcbComp7
        tdxTcbComp8
        tdxTcbComp9
        tdxTcbComp10
        tdxTcbComp11
        tdxTcbComp12
        tdxTcbComp13
        tdxTcbComp14
        tdxTcbComp15
        tdxTcbComp16
    pceid = PCEID 
    fmspc = FMSPC 
    TODO = SGX Type
    piid = PIID 
    TODO = Configuration
      Dynamic Platform Flag
      Cached Keys Flag
      SMT Enabled Flag
    PCAKsig
  ICAcert
    pubPCAK
    IRKsig
  rootcert
    pubIRK
    IRKselfsig

(***Formal Properties****)

-----------------------------------
Intel TDX attestation Steps
-----------------------------------
 0a. TD: Generate TDK key-pair
 0b. TD -> Verifier: pubTDK
 
 1. Verifier -> TD: challenge (nonce) (* verifier sends a challenge to attestation agent*)
 
 2. TD -> TDX Module: rdata = sha256(pubTDK || challenge)   (* attestation agent TD computes rdata by hashing the pblic key of TD with the nounce where pubTDK as generated in step 0a --> Host Vmm Request TD report from TDX module *)
     
 3. TDX Module: (*TDX moudle assemble tdi from TDCS *)
    where (*took tdiclaims from above*)
      tdi = tdiClaims || res5, 
        tdiClaims  = tdatt || xfam || mrtd || mrc || mro || mroc || rtmr )
          tdatt = tudFlag || secFlag
        res5 is obtained as input
    and compute its hash: 
      tdih = sha384(tdi)
      (*TDX module asking cpu for SEAM report by performing following operation *)
 4. TDX Module -> CPU HW: rtyp || tdih || rdata 
    where 
      rtyp is freshly generated 
      tdih as computed in step 3
      rdata as received in step 2
      (* CPU generates SEAM report by adding rms with tcbi*)
 5. CPU HW: Create SEAMREPORT smr = rms || tcbi, 
 
      tcbi = val || tcbiClaims || res3, 
        val is freshly generated
        tcbiClaims = TDXTCBSVN || mrs || mrss || att, (model as input [assumption e])
        res3 is obtained as input
      rms = rmsBody || mac,
        rmsBody = rtyp || res1 || csvn || tcbh || tdih || rdata || res2,
          rtyp, tdih and rdata as received in step 4,
          tcbh = sha384(tcbi), 
          res1 and res2 are obtained as input [assumption e],
          csvn taken as input [assumption e], and 
        mac = hmac(MK,rmsBody)
        
        (*CPU sends SMR or SEAM report to TDX module and generate 2 events for it*)
 6. CPU HW -> TDX Module: smr 
    6a. event CPUsentSMR (tcbiClaims, rdata)
        where 
          tcbiClaims from step 5 
          rdata as received in step 4
    6b. CPU HW -> TDX Module: smr
        where 
          smr as generated in step 5
          
          (* TDX module creates TDR report by using smr from cpu, res4 from input and tdi from TDX module *)
 7. TDX Module: Create TDREPORT tdr = smr || res4 || tdi
    where 
      smr as received in step 6
      res4 is obtained as input [assumption e]
      tdi as generated in step 3
      
      (* TDX module now generates an event to send the tdr report to TD*)
 8. TDX Module -> TD: tdr 
    8a. event TDXMsentTDR(tdiClaims)
        where 
          tdiClaims as generated in step 3 
    8b. TDX Module -> TD: tdr 
        where 
          tdr as generated in step 7
          (* Host TD sends this report to Guest VMM*)
 9. TD -> VMM: tdr 
 (* host vmm sends this to QE for signature *)
10. VMM -> QE: tdr 
(* QE before signing takes where tcbh, tcbi, tdih and tdi as received in tdr in step 10 *)
11. QE: Check hashes: tcbh=sha384(tcbi) && tdih=sha384(tdi)? (* checks if they both are equal, if hashes match then continue*)
    (* QE talks to cpu to generate rms *)
12. QE -> CPU HW: rms=rmsBody || mac
    
    (*where rms as received as part of tdr in step 10*)
    (* cpu checks if the recived rms from QE is equal to the onc calculated original *)
    
13. CPU HW: verify report, i.e., mac=hmac(MK, rmsBody)? (received MAC = computed MAC?)
   (* where mac and rmsBody as received in step 12 *)
14. CPU HW -> QE: verification result (true/false)
(* cpu sends the result of verification to the QE, if true then continue*) 
(* If the result is true, then QE will sign the tdr report*)
15. QE: AKsig = sign(AK,QuoteHeader || QuoteBody)
    where 
      QuoteHeader is freshly generated [assumption e]
      QuoteBody = tcbiClaims || tdiClaims || rdata 
        tcbiClaims, tdiClaims and rdata as received as part of tdr in step 10
*)


(**********Our formal properties***************)

(* 1- Freshness Queries *)

(* Freshness Property 1 *)
query tcbiClaims, tdiClaims, rdata: bitstring;
  event(QuoteVerified(tcbiClaims, tdiClaims, rdata)) ==> 
  event(CPUsentSMR(tcbiClaims, rdata)).

(* Freshness Property 2 *)
query tcbiClaims, tdiClaims, rdata: bitstring;
  event(QuoteVerified(tcbiClaims, tdiClaims, rdata)) ==> 
  event(TDXMsentTDR(tdiClaims)).







(**********************************************************************)
(* Declarations of the processes for each role. *)
(**********************************************************************)
let PCE(c_PCE_CPU: channel, PCK: SigningKey) = 
  (* out(c_PCE_main, PCK); pass to main *)
  in(c_PCE_QE, (pubAK_PCE: VerifyingKey, CPUSVN_PCE: nat, misc_PCE: bitstring, cetAtt_PCE: bitstring, res6_PCE: bitstring, extprodid_PCE: bitstring, provKeyFlag_PCE: bool, debugFlag_PCE: bool, mrEnc_PCE: bitstring, res7_PCE: bitstring, mrSigner_PCE: bitstring, res8_PCE: bitstring, config_PCE: bitstring, prodid_PCE: bitstring, QESVN_PCE: nat, confSVN_PCE: nat, res9_PCE: bitstring, famID_PCE: bitstring, QErdata_PCE: bitstring, keyID_PCE: bitstring, QEmac_PCE: bitstring, QEauthData_PCE: bitstring));  (*Step I3 Obtain pubAK for certification *)
  (* out(c_PCE_CPU,true);  Step I4 *)
  in(c_PCE_CPU,RK: MacKey); (*Step I5*)
  let attEnc_PCE = (provKeyFlag_PCE, debugFlag_PCE) in 
  let QEReportBody_PCE = (CPUSVN_PCE,misc_PCE,cetAtt_PCE,res6_PCE,extprodid_PCE,attEnc_PCE,mrEnc_PCE,res7_PCE,mrSigner_PCE,res8_PCE,config_PCE,prodid_PCE,QESVN_PCE,confSVN_PCE,res9_PCE,famID_PCE,QErdata_PCE) in
  if QEmac_PCE = hmacSha256(RK,QEReportBody_PCE) then (*Step I6: received MAC = computed MAC?*)  
  let QErdataPrehash = (pubAK_PCE,QEauthData_PCE) in (*for Step I6ii*)
  let QErdata = (sha256Hash(QErdataPrehash), zeroPadRef) in (*for Step I6ii*)
  if QErdata_PCE = QErdata then (*Step I6ii: received rdata = computed rdata?*)
  if provKeyFlag_PCE = true then (* Step I6iii *)
  (*event AKverified(pubAK_PCE);*)
  let PCKsig = sign(PCK,QEReportBody_PCE) in
  let AKcert = (pubAK_PCE,QEReportBody_PCE,PCKsig,QEauthData_PCE) in 
  event test4;
  out(c_PCE_QE, AKcert).  (*Step I7 AK cert*)


let QEinit(c_QE_CPU,c_QE_main: channel, PCEinfo: bitstring) =
  new AK: SigningKey;  (*Step I0 Note: generate here inside init process because used throughout*)
  let pubAK = pub(AK) in  (*Public part of attestation key*)
  event AKsent(pubAK);
  out(c, pubAK); (*Give public key to adversary*)
  in(c, QEauthData: bitstring);
  let QErdataPrehash = (pubAK,QEauthData) in (*for Step I1*)
  in(c, zeroPad: Hash);
  let QErdata = (sha256Hash(QErdataPrehash), zeroPad) in (*for Step I1*)
  let TargetInfo = PCEinfo in 
  event test;
  out (c_QE_CPU,(QErdata,TargetInfo));  (*Step I1*)
  in(c_QE_CPU,(QEReportBody_QE: bitstring, keyID_QE: bitstring, QEmac_QE: bitstring));  (*Step I2*)
  (* event test3; *)
  out(c_PCE_QE, (pubAK,QEReportBody_QE,keyID_QE,QEmac_QE,QEauthData)); (*Step I3 Send public key for certification*)  
  in(c_PCE_QE, (AKcert_QE: bitstring)); (*Step I7 AK cert*)
  out(c_QE_main, (AK,AKcert_QE)). (*AK || AK cert: pass to main*)  

let CPUinit(c_QE_CPU,c_PCE_CPU: channel, PCEinfo: bitstring) = 
  in(c_QE_CPU,(QErdata_CPU: Hash, TargetInfo_CPU: bitstring));  (*Step I1*)
  in(c,CPUSVN: nat); (*for Step I2:declaration of new names with type nat is not allowed: manual p. 39, so input from adversary*)
  in(c,QESVN: nat); (*for Step I2:declaration of new names with type nat is not allowed: manual p. 39, so input from adversary*)  
  in(c,confSVN: nat); (*for Step I2:declaration of new names with type nat is not allowed: manual p. 39, so input from adversary*)
  in(c,mrEnc: bitstring);
  in(c,mrSigner: bitstring);
  in(c,prodid: bitstring);
  new misc: bitstring;
  new cetAtt: bitstring;
  new res6: bitstring;
  new extprodid: bitstring;
  in (c, provKeyFlag: bool);
  in (c, debugFlag: bool);
  new res7: bitstring;
  new res8: bitstring;
  new config: bitstring;
  new res9: bitstring;
  new famID: bitstring;
  let attEnc = (provKeyFlag, debugFlag) in 
  let QEReportBody = (CPUSVN , misc , cetAtt , res6 , extprodid , attEnc , mrEnc , res7 , mrSigner , res8 , config , prodid , QESVN , confSVN , res9 , famID , QErdata_CPU) in  (*for Step I2*)
  new keyID: bitstring; (*[assumption e]*)
  let RK = kdfRK(keyID,TargetInfo_CPU) in 
  let QEmac = hmacSha256(RK,QEReportBody) in
  let QEReport = (QEReportBody,keyID,QEmac) in 
  event test2;
  out (c_QE_CPU,QEReport);  (*Step I2*)

  (* in(c_PCE_CPU,request:bool); (*Step I4*)
  if request = true then  *)
  event test5;
  (*Request came from PCE, so the key here is generated for PCE*)
  let RKtarget = kdfRK(keyID,PCEinfo) in 
  out (c_PCE_CPU,RKtarget). (*Step I5*)




let QE(c_QE_CPU: channel, AK: SigningKey, AKcert: bitstring, PCKcert: bitstring, ICAcert: bitstring, rootcert: bitstring) =
  in(c,(rtyp_QE: bitstring, res1_QE: bitstring, csvn_QE: nat, tcbh_QE: Hash, tdih_QE: Hash, rdata_QE: bitstring, res2_QE: bitstring, mac_QE: bitstring, val_QE: bitstring, tcbiClaims_QE: bitstring, res3_QE: bitstring, res4_QE: bitstring, tdiClaims_QE: bitstring, res5_QE: bitstring));  (*Step 10*)
  (*Note: Splitting this way in Step 10 avoids the destructors to extract*)
  let tcbi_QE = (val_QE,tcbiClaims_QE,res3_QE) in (*for Step 11*)
  let tdi_QE = (tdiClaims_QE,res5_QE) in (*for Step 11*)
  let (=tcbh_QE) = sha384Hash(tcbi_QE) in  (*Step 11: Check the hash of received tcbi_QE*)
  let (=tdih_QE) = sha384Hash(tdi_QE) in   (*Step 11: Check the hash of received tdi_QE*)
  let rmsBody_QE = (rtyp_QE,res1_QE,csvn_QE,tcbh_QE,tdih_QE,rdata_QE,res2_QE) in (*for Steps 12,15*)
  let rms_QE = (rmsBody_QE,mac_QE) in (*for Step 12*)
  out (c_QE_CPU,rms_QE); (*Step 12*)
  (*Step 12-14: Check the mac of received rms, i.e., if mac_QE = hmacSha256(MK,rmsBody_QE)*)
  in(c_QE_CPU,result:bool); (*Step 14*)
  if result = true then (*for Step 15*)
  (* event test6(tdiClaims_QE); *)
  event test7(tcbiClaims_QE,rdata_QE);  
  new QuoteHeader: bitstring;  (*for Step 15 [see assumption e]*)
  let QuoteBody = (tcbiClaims_QE,tdiClaims_QE,rdata_QE) in (* for Step 15*)
  let AKsig = sign(AK,(QuoteHeader,QuoteBody)) in (*Step 15*)
  let Quote = (QuoteHeader,QuoteBody,AKsig,AKcert,PCKcert,ICAcert,rootcert) in (*for Step 16 *)
  out(c, Quote). (*Step 16*)

(*VMM: Part of adversary*)

let TD(c_TD_TDX: channel) =
  new TDK: SigningKey;  (* Step 0a: Private part of TDK *)
  let pubTDK = pub(TDK) in  (* Step 0a: Public part of TDK *)
  out (c, pubTDK);  (* Step 0b *)

  in  (c,challenge_TD: bitstring);  (* Step 1c *)
  let rdata_prehash = (pub(TDK),challenge_TD) in (* for Step 2 *)
  let rdata = sha256Hash(rdata_prehash) in (*for Step 2 *)
  event TDidentity(pub(TDK));
  out (c_TD_TDX,rdata);  (*Step 2 rdata = hash (TD's own public key || challenge) *)
  in  (c_TD_TDX,tdr_TD: bitstring);  (*Step 8*)
  out (c,tdr_TD);  (*Step 9*)
  in  (c,Quote_TD: bitstring);  (*Step 17*)
  (* in(c,(QuoteHeader_TD: bitstring, tcbiClaims_TD: bitstring, tdiClaims_TD: bitstring, rdata_TD: bitstring, AKsig_TD: bitstring, pubAK_TD: VerifyingKey, QEReportBody_TD: bitstring, PCKsig_TD: bitstring, QEauthData_TD: bitstring));  Step 17   *)
  (* event test6(tdiClaims_TD); *)
  out (c,Quote_TD).  (*Step 18*)

let TDXModule(c_TD_TDX: channel, c_TDX_CPU: channel) =
  in(c_TD_TDX,rdata_TDX: bitstring);  (*Step 2*)
  in(c,tudFlag: bool); (*for Step 3: Get information about TD [assumption e]*)
  in(c,secFlag: bool); (*for Step 3: Get information about TD [assumption e]*)
  in(c,xfam: bitstring); (*for Step 3: Get information about TD [assumption e]*)
  in(c,mrtd: bitstring); (*for Step 3: Get information about TD [assumption e]*)
  in(c,mrc: bitstring); (*for Step 3: Get information about TD [assumption e]*)
  in(c,mro: bitstring); (*for Step 3: Get information about TD [assumption e]*)
  in(c,mroc: bitstring); (*for Step 3: Get information about TD [assumption e]*)
  in(c,rtmr0: bitstring); (*for Step 3: Get information about TD [assumption e]*)  
  in(c,rtmr1: bitstring); (*for Step 3: Get information about TD [assumption e]*)  
  in(c,rtmr2: bitstring); (*for Step 3: Get information about TD [assumption e]*)  
  in(c,rtmr3: bitstring); (*for Step 3: Get information about TD [assumption e]*) 
  let tdatt = (tudFlag, secFlag) in
  let tdiClaims = (tdatt,xfam,mrtd,mrc,mro,mroc,rtmr0,rtmr1,rtmr2,rtmr3) in 
  in(c, res5: bitstring); (*for Step 3: reserved fields [assumption e]*)
  let tdi = (tdiClaims,res5) in (* Step 3 *)
  let tdih = sha384Hash(tdi) in (*Step 3*)
  new rtyp: bitstring; (* for Step 4: Get information about report type [see assumption e]*)
  out  (c_TDX_CPU,(rtyp,tdih,rdata_TDX));  (*Step 4*)
  in(c_TDX_CPU,smr_TDX: bitstring); (*Step 6*)
  in(c, res4: bitstring); (*for Step 7 [see asssumption e]*)
  let tdr = (smr_TDX,res4,tdi) in (* Step 7 *)
  (* event TDXMsentTDR(smr_TDX,tdi);   Need all parameters rather than tdr for query *)
  event TDXMsentTDR(tdiClaims);
  out (c_TD_TDX,tdr).  (*Step 8*)

let CPUHardware(c_QE_CPU: channel, c_TDX_CPU: channel, MK: MacKey) =
  in(c_TDX_CPU,(rtyp_CPU: bitstring, tdih_CPU: Hash, rdata_CPU: bitstring));   (* step 4 *)
  in(c,TDXTCBSVN: nat); (*for Step 5*)
  in(c,mrs: bitstring); (*for Step 5*)  
  in(c,mrss: bitstring); (*for Step 5*)    
  in(c,att: bitstring); (*for Step 5*)      
  let tcbiClaims = (TDXTCBSVN,mrs,mrss,att) in 
  in(c,csvn: nat); (*for Step 5*)  
  in(c, res1: bitstring); (*for Step 5: Get missing fields of rms [see assumption e]*)
  in(c, res2: bitstring); (*for Step 5: Get missing fields of rms [see assumption e]*)
  in(c, res3: bitstring); (*for Step 5: Get missing fields of rms [see assumption e]*)
  new val: bitstring;  (*for Step 5: Get missing fields of rms [see assumption e]*)
  let tcbi = (val,tcbiClaims,res3) in (* for Step 5 *)
  let tcbh = sha384Hash(tcbi) in (* for Step 5 *)
  let rmsBody = (rtyp_CPU,res1,csvn,tcbh,tdih_CPU,rdata_CPU,res2) in (*for Step 5: Note:by forming tuple, it should convert hashes to bitstring?*)
  let mac = hmacSha256(MK,rmsBody) in (* for Step 5 *)
  let rms = (rmsBody,mac) in (* for Step 5 *)
  let smr = (rtyp_CPU,res1,csvn,tcbh,tdih_CPU,rdata_CPU,res2,mac,tcbi) in (* Step 5: smr *) 
  event CPUsentSMR(tcbiClaims,rdata_CPU); (*Basically rmsBody || mac || tcbi*)(*Need all parameters rather than smr for query*)
  out (c_TDX_CPU,smr); (*Step 6*)
  in(c_QE_CPU, (rmsBody_CPU: bitstring, mac_CPU: bitstring)); (*Step 12 note that rmsBody_CPU may be different from rmsBody because it went through untrusted VMM*)
  if mac_CPU = hmacSha256(MK,rmsBody_CPU) then (*Step 13: received MAC = computed MAC?*)
  out(c_QE_CPU,true) (*Step 14*)
  else
  out(c_QE_CPU,false). (*Step 14*)

let Verifier(pubIRK: VerifyingKey, sgxTcbComp1Ref: nat, sgxTcbComp2Ref: nat, sgxTcbComp3Ref: nat, sgxTcbComp4Ref: nat, sgxTcbComp5Ref: nat, sgxTcbComp6Ref: nat, sgxTcbComp7Ref: nat, sgxTcbComp8Ref: nat,
    sgxTcbComp9Ref: nat, sgxTcbComp10Ref: nat, sgxTcbComp11Ref: nat, sgxTcbComp12Ref: nat, sgxTcbComp13Ref: nat, sgxTcbComp14Ref: nat, sgxTcbComp15Ref: nat, sgxTcbComp16Ref: nat, PCESVNRef:nat, TDXTCBSVNRef:nat) =
  in(c,pubTDK_Ver: VerifyingKey);   (*Step 1b: can be obtained from untrusted channel since hash is protected via Quote*)
  new challenge: bitstring; (*for Step 1c*)
  out (c,challenge);  (*Step 1c:Send challenge*)
  in(c,(QuoteHeader_Ver: bitstring, 
      TDXTCBSVN_Ver: nat, mrs_Ver: bitstring, mrss_Ver: bitstring, att_Ver: bitstring,   (*tcbiClaims*)
      tudFlag_Ver: bool, secFlag_Ver: bool, xfam_Ver: bitstring, mrtd_Ver: bitstring, mrc_Ver: bitstring, mro_Ver: bitstring, mroc_Ver: bitstring, rtmr0_Ver: bitstring, rtmr1_Ver: bitstring, rtmr2_Ver: bitstring, rtmr3_Ver: bitstring,   (*tdiClaims*)
      rdata_Ver: bitstring,  (*rdata*)
      AKsig_Ver: bitstring, pubAK_Ver: VerifyingKey, CPUSVN_Ver: nat, misc_Ver: bitstring, cetAtt_Ver: bitstring, res6_Ver: bitstring, extprodid_Ver: bitstring, provKeyFlag_Ver: bool, debugFlag_Ver: bool, mrEnc_Ver: bitstring, res7_Ver: bitstring, mrSigner_Ver: bitstring, res8_Ver: bitstring, config_Ver: bitstring, prodid_Ver: bitstring, QESVN_Ver: nat, confSVN_Ver: nat, res9_Ver: bitstring, famID_Ver: bitstring, QErdata_Ver: bitstring, PCKsig_Ver: bitstring, QEauthData_Ver: bitstring, 
      pubPCK_Ver: VerifyingKey, sgxTcbComp1_Ver: nat, sgxTcbComp2_Ver: nat, sgxTcbComp3_Ver: nat, sgxTcbComp4_Ver: nat, sgxTcbComp5_Ver: nat, sgxTcbComp6_Ver: nat, sgxTcbComp7_Ver: nat, sgxTcbComp8_Ver: nat,
      sgxTcbComp9_Ver: nat, sgxTcbComp10_Ver: nat, sgxTcbComp11_Ver: nat, sgxTcbComp12_Ver: nat, sgxTcbComp13_Ver: nat, sgxTcbComp14_Ver: nat, sgxTcbComp15_Ver: nat, sgxTcbComp16_Ver: nat, PCESVN_Ver: nat, PCAKsig_Ver: bitstring,  (*PCKcert*)
      pubPCAK_Ver: VerifyingKey, IRKsig_Ver: bitstring,  (*ICAcert*)
      pubIRK_Ver: VerifyingKey, IRKselfsig_Ver: bitstring));  (*Step 18*)

  (* Step 19a *)
  if verifySign(pubIRK,verKey2bs(pubIRK_Ver),IRKselfsig_Ver) = true then (*Step 19ai: verify authenticity of rootcert*)  
  if verifySign(pubIRK,verKey2bs(pubPCAK_Ver),IRKsig_Ver) = true then (*Step 19aii: verify authenticity of ICAcert*)  
  (* pubPCAK_Ver is authentic, it can be used now *)
  let sgxTcbComp_Ver = (sgxTcbComp1_Ver, sgxTcbComp2_Ver, sgxTcbComp3_Ver, sgxTcbComp4_Ver, sgxTcbComp5_Ver, sgxTcbComp6_Ver, sgxTcbComp7_Ver, sgxTcbComp8_Ver,
    sgxTcbComp9_Ver, sgxTcbComp10_Ver, sgxTcbComp11_Ver, sgxTcbComp12_Ver, sgxTcbComp13_Ver, sgxTcbComp14_Ver, sgxTcbComp15_Ver, sgxTcbComp16_Ver) in
  if verifySign(pubPCAK_Ver,(pubPCK_Ver,sgxTcbComp_Ver,PCESVN_Ver),PCAKsig_Ver) = true then (*Step 19aiii: verify authenticity of PCKcert*)  
  (* pubPCK_Ver is authentic, it can be used now *)

  (* Step 19b *)
  let attEnc_Ver = (provKeyFlag_Ver, debugFlag_Ver) in 
  let QEReportBody_Ver = (CPUSVN_Ver,misc_Ver,cetAtt_Ver,res6_Ver,extprodid_Ver,attEnc_Ver,mrEnc_Ver,res7_Ver,mrSigner_Ver,res8_Ver,config_Ver,prodid_Ver,QESVN_Ver,confSVN_Ver,res9_Ver,famID_Ver,QErdata_Ver) in
  if verifySign(pubPCK_Ver,QEReportBody_Ver,PCKsig_Ver) = true then (*Step 19b: verify authenticity of AK cert*)

  (* Step 19c *)
  let QErdata_comp_prehash = (pubAK_Ver,QEauthDataRef) in (* for Step 19c: QErdata prehash *)
  let QErdata_comp = (sha256Hash(QErdata_comp_prehash), zeroPadRef) in (* for Step 19c: computed QErdata *)
  if (QErdata_Ver = QErdata_comp) then     (* Step 19c: received = computed? *)
  event test8;    

  (* Step 19d *)
  let tcbiClaims_Ver = (TDXTCBSVN_Ver,mrs_Ver,mrss_Ver,att_Ver) in 
  let tdatt_Ver = (tudFlag_Ver, secFlag_Ver) in
  let tdiClaims_Ver = (tdatt_Ver,xfam_Ver,mrtd_Ver,mrc_Ver,mro_Ver,mroc_Ver,rtmr0_Ver,rtmr1_Ver,rtmr2_Ver,rtmr3_Ver) in   
  let QuoteBody_Ver = (tcbiClaims_Ver,tdiClaims_Ver,rdata_Ver) in (*for Step 19d*)
  if verifySign(pubAK_Ver,(QuoteHeader_Ver,QuoteBody_Ver),AKsig_Ver) = true then (*Step 19d: verify authenticity of TD Quote*)
  event test3;
  event test6(tdiClaims_Ver);

  (* Step 19e *)
  let rdata_comp_prehash = (pubTDK_Ver,challenge) in (* for Step 19e: rdata prehash *)
  let rdata_comp = sha256Hash(rdata_comp_prehash) in (* for Step 19e: computed rdata *)
  if (rdata_Ver = hash2bs(rdata_comp)) then     (* Step 19e: freshness and public key check *)
  (* Golden value for challenge is the one which is sent *)
  (* Golden value for public key is the one in the authentic TD Quote *)
  (* If the hash of concatenation match, it means both values match *)

  (* Step 20a *)
  if (mrSigner_Ver = mrSignerRef) then  (* Step 20ai mrSigner of TD QE *)
  if (prodid_Ver = prodidRef) then (* Step 20aii prodid of TD QE *)
  if provKeyFlag_Ver = true && debugFlag_Ver = false then (* Step 20aiv *) 
  in(c,QESVNRef: nat); 
  if (QESVN_Ver >= QESVNRef)  (* Step 20av: Check QESVN *)

  (* Step 20b *)
  && (mrtd_Ver = mrtdRef)  (* Step 20bi *)
  && (rtmr0_Ver = rtmr0Ref)  (* Step 20bii *)
  && (rtmr1_Ver = rtmr1Ref)  (* Step 20bii *)
  && (rtmr2_Ver = rtmr2Ref)  (* Step 20bii *)
  && (rtmr3_Ver = rtmr3Ref)  (* Step 20bii *)
  && (mro_Ver = mroRef)  (* Step 20biiia *)
  && (mroc_Ver = mrocRef)  (* Step 20biiib *)
  && (mrc_Ver = mrcRef)  (* Step 20biv *)
  && tudFlag_Ver = false  (* Step 20bva *)
  && secFlag_Ver = true  (* Step 20bvb *)
  (* Note: The name secFlagRef cannot be declared with the type 'bool'. Hence, taken as true for reference *)
  (* if secFlag_Ver = secFlagRef then *)

  (* Step 20c *)
  && (mrs_Ver = mrsRef)  (* Step 20ci *)
  && (mrss_Ver = mrssRef)  (* Step 20cii *)
  && (att_Ver = attRef)  (* Step 20ciii *)
  
  (* Step 20d *)
  (* Step 20di: Check SGXTCBSVN *)
  && (sgxTcbComp1_Ver >= sgxTcbComp1Ref) 
  && (sgxTcbComp2_Ver >= sgxTcbComp2Ref)
  && (sgxTcbComp3_Ver >= sgxTcbComp3Ref)
  && (sgxTcbComp4_Ver >= sgxTcbComp4Ref)
  && (sgxTcbComp5_Ver >= sgxTcbComp5Ref)
  && (sgxTcbComp6_Ver >= sgxTcbComp6Ref)
  && (sgxTcbComp7_Ver >= sgxTcbComp7Ref)
  && (sgxTcbComp8_Ver >= sgxTcbComp8Ref)
  && (sgxTcbComp9_Ver >= sgxTcbComp9Ref)
  && (sgxTcbComp10_Ver >= sgxTcbComp10Ref)
  && (sgxTcbComp11_Ver >= sgxTcbComp11Ref)
  && (sgxTcbComp12_Ver >= sgxTcbComp12Ref)  
  && (sgxTcbComp13_Ver >= sgxTcbComp13Ref)
  && (sgxTcbComp14_Ver >= sgxTcbComp14Ref)
  && (sgxTcbComp15_Ver >= sgxTcbComp15Ref)
  && (sgxTcbComp16_Ver >= sgxTcbComp16Ref) 

  && (PCESVN_Ver >= PCESVNRef)  (* Step 20dii: Check PCESVN *)

  && (TDXTCBSVN_Ver >= TDXTCBSVNRef) then (* Step 20diii: Check TDXTCBSVN *)

  (* pubTDK_Ver is now trustworthy *)
  event QuoteVerified(tcbiClaims_Ver,tdiClaims_Ver,rdata_Ver);
  event VerIdentity(pubTDK_Ver).

  
(**********************************************************************)
(* The main system *)
(**********************************************************************)
(* process 0 *)
set preciseActions = true. (*Required otherwise some properties cannot be proved*)

process
  new MK: MacKey; (*MAC key for smr: single MAC key is used for all TDs on same platform, so generate here*)

  (* Generate IRK and rootcert here  *)
  new IRK: SigningKey;  (*Note: generate here because need to pass public key to Verifier*)
  let pubIRK = pub(IRK) in  (*Public part of IRK*)
  let IRKselfsig = sign(IRK,verKey2bs(pubIRK)) in
  let rootcert = (pubIRK,IRKselfsig) in 
  out(c, rootcert); (*give rootcert to adversary*)

  (* Generate PCAK and ICAcert here *)
  new PCAK: SigningKey;  
  let pubPCAK = pub(PCAK) in  (*Public part of PCAK*)
  let IRKsig = sign(IRK,verKey2bs(pubPCAK)) in
  let ICAcert = (pubPCAK,IRKsig) in 
  out(c, ICAcert); (*give ICAcert to adversary*)

  (* Generate PCK and PCKcert here *)
  new PCK: SigningKey;  (*Step I0 *)
  let pubPCK = pub(PCK) in  (*Public part of PCK*)
  in(c,sgxTcbComp1: nat); 
  in(c,sgxTcbComp2: nat); 
  in(c,sgxTcbComp3: nat); 
  in(c,sgxTcbComp4: nat); 
  in(c,sgxTcbComp5: nat); 
  in(c,sgxTcbComp6: nat); 
  in(c,sgxTcbComp7: nat); 
  in(c,sgxTcbComp8: nat); 
  in(c,sgxTcbComp9: nat); 
  in(c,sgxTcbComp10: nat); 
  in(c,sgxTcbComp11: nat); 
  in(c,sgxTcbComp12: nat); 
  in(c,sgxTcbComp13: nat); 
  in(c,sgxTcbComp14: nat); 
  in(c,sgxTcbComp15: nat); 
  in(c,sgxTcbComp16: nat); 
  in(c,PCESVN: nat); 
  let sgxTcbComp = (sgxTcbComp1, sgxTcbComp2, sgxTcbComp3, sgxTcbComp4, sgxTcbComp5, sgxTcbComp6, sgxTcbComp7, sgxTcbComp8,
    sgxTcbComp9, sgxTcbComp10, sgxTcbComp11, sgxTcbComp12, sgxTcbComp13, sgxTcbComp14, sgxTcbComp15, sgxTcbComp16) in
  let PCAKsig = sign(PCAK,(pubPCK,sgxTcbComp,PCESVN)) in
  let PCKcert = (pubPCK,sgxTcbComp,PCAKsig) in 
  out(c, PCKcert); (*give PCKcert to adversary*)
  (*When PCE is untrusted, leak PCK to adversary *)
  (* out(c, PCK); *)

  new c_QE_CPUinit: channel; (*secure channel; enforced by SoC*)
  new c_PCE_CPUinit: channel; (*Private channel*)     
  new c_QE_main: channel; (*Private channel*)

  new PCEinfo: bitstring; (*To implement TargetInfo*)

  (* Initialization phase *)
  PCE(c_PCE_CPUinit,PCK) | 
  QEinit(c_QE_CPUinit,c_QE_main,PCEinfo) |  
  CPUinit(c_QE_CPUinit,c_PCE_CPUinit,PCEinfo) |
  in(c_QE_main, (AK: SigningKey, AKcert: bitstring));

  in(c,sgxTcbComp1Ref: nat); 
  in(c,sgxTcbComp2Ref: nat); 
  in(c,sgxTcbComp3Ref: nat); 
  in(c,sgxTcbComp4Ref: nat); 
  in(c,sgxTcbComp5Ref: nat); 
  in(c,sgxTcbComp6Ref: nat); 
  in(c,sgxTcbComp7Ref: nat); 
  in(c,sgxTcbComp8Ref: nat); 
  in(c,sgxTcbComp9Ref: nat); 
  in(c,sgxTcbComp10Ref: nat); 
  in(c,sgxTcbComp11Ref: nat); 
  in(c,sgxTcbComp12Ref: nat); 
  in(c,sgxTcbComp13Ref: nat); 
  in(c,sgxTcbComp14Ref: nat); 
  in(c,sgxTcbComp15Ref: nat); 
  in(c,sgxTcbComp16Ref: nat); 
  in(c,PCESVNRef: nat);
  in(c,TDXTCBSVNRef: nat);

  (* Attestation protocol phase  *)
  (*The trace will have the processes in the following order*)
  ( ! ( new c_QE_CPU: channel; 
        new c_TDX_CPU: channel; 
        new c_TD_TDX: channel;  
      ( QE(c_QE_CPU, AK, AKcert, PCKcert, ICAcert, rootcert) |  
      TD(c_TD_TDX) | 
      TDXModule(c_TD_TDX, c_TDX_CPU) | 
      CPUHardware(c_QE_CPU, c_TDX_CPU, MK)  ) ) |
  (!Verifier(pub(IRK), sgxTcbComp1Ref, sgxTcbComp2Ref, sgxTcbComp3Ref, sgxTcbComp4Ref, sgxTcbComp5Ref, sgxTcbComp6Ref, sgxTcbComp7Ref, sgxTcbComp8Ref,
    sgxTcbComp9Ref, sgxTcbComp10Ref, sgxTcbComp11Ref, sgxTcbComp12Ref, sgxTcbComp13Ref, sgxTcbComp14Ref, sgxTcbComp15Ref, sgxTcbComp16Ref, PCESVNRef, TDXTCBSVNRef)) ) 
